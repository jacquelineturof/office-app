{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jacquelineturof/Next/office-suite-app/components/UI/Input.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './Input.module.css';\n/*\n    UI Input\n    @param elementType { string } textarea || select\n    @param elementConfig { obj } contains all the regular\n    html config for the input\n    @param value { any } the value of the input, should correspond to the\n    kind of input element\n    @changed { func } input change handler.\n    @iconConfig { obj } obj containing info about the icon { name, package } = iconConfig\n    @touched { boolean } true if user has focused on the input\n    @valid { boolean } true if the input entered passes our validity rules\n*/\n\nvar Input = function Input(_ref) {\n  var elementType = _ref.elementType,\n      elementConfig = _ref.elementConfig,\n      value = _ref.value,\n      changed = _ref.changed,\n      iconConfig = _ref.iconConfig,\n      touched = _ref.touched,\n      valid = _ref.valid,\n      warningMessage = _ref.warningMessage;\n  var inputElement = null;\n  var inputContainerClasses = [classes.InputContainer];\n\n  if (touched && !valid) {\n    inputContainerClasses.push(classes.Invalid);\n  }\n  /*\n      Input choices textarea & select\n      input will be default\n  */\n\n\n  switch (elementType) {\n    case 'select':\n      inputContainerClasses.push(classes.Select);\n      inputElement = __jsx(\"select\", {\n        className: classes.InputElement,\n        value: value,\n        onChange: changed,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, elementConfig.options.map(function (option) {\n        return __jsx(\"option\", {\n          key: option.value,\n          value: option.value,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }\n        }, option.displayValue);\n      }));\n      break;\n\n    case 'textarea':\n      inputContainerClasses.push(classes.TextArea);\n      inputElement = __jsx(\"textarea\", _extends({\n        className: classes.InputElement,\n        value: value,\n        onChange: changed\n      }, elementConfig, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }));\n      break;\n\n    default:\n      inputElement = __jsx(\"input\", _extends({\n        className: classes.InputElement,\n        value: value,\n        onChange: changed\n      }, elementConfig, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }));\n  }\n\n  var icon = iconConfig ? __jsx(FontAwesomeIcon, {\n    icon: [iconConfig[\"package\"], iconConfig.name],\n    className: classes.Icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }) : null;\n  return __jsx(\"div\", {\n    className: classes.MessageContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: inputContainerClasses.join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, icon, inputElement), touched && !valid ? __jsx(\"p\", {\n    className: classes.WarningMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, warningMessage) : null);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/jacquelineturof/Next/office-suite-app/components/UI/Input.js"],"names":["React","FontAwesomeIcon","classes","Input","elementType","elementConfig","value","changed","iconConfig","touched","valid","warningMessage","inputElement","inputContainerClasses","InputContainer","push","Invalid","Select","InputElement","options","map","option","displayValue","TextArea","icon","name","Icon","MessageContainer","join","WarningMessage"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport classes from './Input.module.css'\n\n/*\n    UI Input\n    @param elementType { string } textarea || select\n    @param elementConfig { obj } contains all the regular\n    html config for the input\n    @param value { any } the value of the input, should correspond to the\n    kind of input element\n    @changed { func } input change handler.\n    @iconConfig { obj } obj containing info about the icon { name, package } = iconConfig\n    @touched { boolean } true if user has focused on the input\n    @valid { boolean } true if the input entered passes our validity rules\n*/\nconst Input = ({ \n    elementType, \n    elementConfig, \n    value, \n    changed, \n    iconConfig, \n    touched, \n    valid,\n    warningMessage \n}) => {\n    let inputElement = null\n    const inputContainerClasses = [ classes.InputContainer ]\n\n    if (touched && !valid) {\n        inputContainerClasses.push(classes.Invalid)\n    }\n\n    /*\n        Input choices textarea & select\n        input will be default\n    */\n    switch( elementType ) {\n        case ( 'select' ):\n            inputContainerClasses.push(classes.Select)\n            inputElement = (\n                <select\n                    className = { classes.InputElement }\n                    value = { value }\n                    onChange = { changed }>\n                    { elementConfig.options.map(option => (\n                        <option key = { option.value } value = { option.value }>\n                            { option.displayValue }\n                        </option>\n                    ))}\n                </select>\n            )\n            break\n        case ( 'textarea' ):\n            inputContainerClasses.push(classes.TextArea)\n            inputElement = (\n                <textarea\n                    className = { classes.InputElement }\n                    value = { value }\n                    onChange = { changed }\n                    { ...elementConfig }>\n                </textarea>\n            )\n            break\n        default: \n            inputElement = (\n                <input\n                    className = { classes.InputElement }\n                    value = { value }\n                    onChange = { changed }\n                    { ...elementConfig } />\n            )\n    }\n\n    const icon = iconConfig \n        ? (\n            <FontAwesomeIcon \n                icon = { [ iconConfig.package, iconConfig.name ] } \n                className = { classes.Icon } /> \n        )\n        : null\n    \n    return (\n        <div className = { classes.MessageContainer }>\n            <div className = { inputContainerClasses.join(' ') }>\n                { icon }\n                { inputElement }\n            </div>\n            {   \n                touched && !valid \n                    ? (\n                        <p className = { classes.WarningMessage }>\n                            { warningMessage }\n                        </p>\n                    ) \n                    : null\n            }\n        </div>\n\n    )\n}\n\nexport default Input"]},"metadata":{},"sourceType":"module"}