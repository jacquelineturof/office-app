{"ast":null,"code":"var _jsxFileName = \"/Users/jacquelineturof/Next/office-suite-app/components/AuthForm.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Button from './UI/Button';\nimport Input from './UI/Input';\nimport checkValidity from '../utility/checkValidity';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './AuthForm.module.css';\n\nconst AuthProviders = ({\n  formType\n}) => __jsx(\"div\", {\n  className: classes.AuthProvidersContainer,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }\n}, formType === 'register' ? 'Get Started' : 'Login'), __jsx(\"div\", {\n  className: classes.AuthProviders,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }\n}, __jsx(\"div\", {\n  className: [classes.IconContainer, classes.FacebookBlue, \"Center\"].join(' '),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 13\n  }\n}, __jsx(FontAwesomeIcon, {\n  icon: ['fab', 'facebook'],\n  className: classes.Icon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 17\n  }\n})), __jsx(\"div\", {\n  className: [classes.IconContainer, classes.GoogleRed, \"Center\"].join(' '),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }\n}, __jsx(FontAwesomeIcon, {\n  icon: ['fab', 'google'],\n  className: classes.Icon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 17\n  }\n}))));\n\nconst Banner = ({\n  formType\n}) => __jsx(\"div\", {\n  className: classes.Banner,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }\n}, __jsx(\"h1\", {\n  className: classes.AppName,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }\n}, __jsx(\"span\", {\n  className: \"Bold Uppercase\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 45\n  }\n}, \"super\"), \"cubicle\"), __jsx(\"p\", {\n  className: classes.Tag,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }\n}, \"Hempen halter wench hornswaggle hail-shot nipper boom yo-ho-ho topmast gangplank parley. Barkadeer belay salmagundi provost mizzen pillage Shiver me timbers black jack scuppers fire in the hole.\"), __jsx(AuthProviders, {\n  formType: formType,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }\n}));\n\nconst FormControl = ({\n  formType,\n  setFormType\n}) => __jsx(\"div\", {\n  className: classes.FormControlContainer,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }\n}, __jsx(Button, {\n  type: formType === 'login' ? \"Active\" : \"Simple\",\n  clicked: () => setFormType('login'),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }\n}, \"Login\"), __jsx(Button, {\n  type: formType === 'register' ? \"Active\" : \"Simple\",\n  clicked: () => setFormType('register'),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }\n}, \"Register\"));\n\nconst Form = ({\n  formType,\n  setFormType\n}) => {\n  /*\n      Form Inputs\n  */\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: confirmPassword,\n    1: setConfirmPassword\n  } = useState('');\n  /*\n     INPUT Validation State\n  */\n\n  const {\n    0: usernameIsValid,\n    1: setUsernameIsValid\n  } = useState('');\n  const {\n    0: emailIsValid,\n    1: setEmailIsValid\n  } = useState('');\n  const {\n    0: passwordIsValid,\n    1: setPasswordIsValid\n  } = useState('');\n  const {\n    0: confirmIsValid,\n    1: setConfirmIsValid\n  } = useState('confirm');\n  const {\n    0: usernameIsTouched,\n    1: setUsernameIsTouched\n  } = useState(false);\n  const {\n    0: emailIsTouched,\n    1: setEmailIsTouched\n  } = useState(false);\n  const {\n    0: passwordIsTouched,\n    1: setPasswordIsTouched\n  } = useState(false);\n  const {\n    0: confirmIsTouched,\n    1: setConfirmIsTouched\n  } = useState(false);\n  /*\n      Form Inputs Config\n  */\n\n  const USERNAME_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'text',\n      placeholder: 'Username'\n    },\n    iconConfig: {\n      name: 'signature',\n      package: 'fal'\n    },\n    value: username,\n    changed: e => inputChangedHandler('username', e.target.value),\n    touched: usernameIsTouched,\n    valid: usernameIsValid\n  };\n  const EMAIL_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'text',\n      placeholder: 'Your Email'\n    },\n    iconConfig: {\n      name: 'at',\n      package: 'fal'\n    },\n    value: email,\n    changed: e => e => inputChangedHandler('email', e.target.value),\n    touched: emailIsTouched,\n    valid: emailIsValid\n  };\n  const PASSWORD_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'password',\n      placeholder: 'Password'\n    },\n    iconConfig: {\n      name: 'lock-alt',\n      package: 'fal'\n    },\n    value: password,\n    changed: e => inputChangedHandler('password', e.target.value),\n    touched: passwordIsTouched,\n    valid: passwordIsValid\n  };\n  const CONFIRM_PASSWORD_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'password',\n      placeholder: 'Confirm Password'\n    },\n    iconConfig: {\n      name: 'check',\n      package: 'fal'\n    },\n    value: confirmPassword,\n    changed: e => inputChangedHandler('confirm', e.target.value),\n    touched: confirmIsTouched,\n    valid: confirmIsValid\n  }; // Form Heading\n\n  let heading;\n  if (formType === 'login') heading = 'Login';else if (formType === 'register') heading = 'Register';else heading = 'Send Password Reset Email'; // forgot password button, set formType = 'forgotPassword'\n\n  const forgotPasswordButton = __jsx(Button, {\n    type: \"Forgot\",\n    clicked: () => setFormType('forgotPassword'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Forgot Password?\");\n  /*\n      Form Handlers\n      changed/submit\n  */\n\n\n  const inputChangedHandler = (controlName, value) => {\n    const emailValidityRules = {\n      required: true,\n      isEmail: true\n    };\n    const usernameValidityRules = {\n      required: true,\n      minLength: 6,\n      maxLength: 14\n    };\n    const passwordValidityRules = {\n      required: true,\n      minLength: 6\n    };\n\n    switch (controlName) {\n      case 'username':\n        setUsernameIsTouched(true);\n        const isValidUsername = checkValidity(value);\n        setUsernameIsValid(isValidUsername);\n        setUsername(value);\n        break;\n\n      case 'email':\n        setEmailIsTouched(true);\n        const isValidEmail = checkValidity(value);\n        setEmailIsValid(isValidEmail);\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPasswordIsTouched(true);\n        const isValidPassword = checkValidity(value);\n        setPasswordIsValid(isValidPassword);\n        setPassword(value);\n        break;\n\n      case 'confirm':\n        setConfirmIsTouched(true);\n        const isConfirmValid = checkValidity(value);\n        setConfirmIsValid(isConfirmValid);\n        setConfirmPassword(value);\n        break;\n\n      default:\n        return;\n      // ERROR\n    }\n  };\n\n  return __jsx(\"form\", {\n    className: classes.Form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    formType: formType,\n    setFormType: setFormType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, heading), __jsx(\"div\", {\n    className: classes.InputsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, formType === 'forgotPassword' ? null : __jsx(Input, _extends({}, USERNAME_CONFIG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 27\n    }\n  })), formType === 'login' ? null : __jsx(Input, _extends({}, EMAIL_CONFIG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 27\n    }\n  })), formType === 'forgotPassword' ? null : __jsx(Input, _extends({}, PASSWORD_CONFIG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }\n  })), formType === 'register' ? __jsx(Input, _extends({}, CONFIRM_PASSWORD_CONFIG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 27\n    }\n  })) : null), __jsx(Button, {\n    isSubmit: true,\n    type: \"Primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }\n  }, \"Submit\"), formType === 'login' ? forgotPasswordButton : null);\n};\n\nconst AuthForm = () => {\n  // formTypes -> 'login', 'register', 'forgotPassword\n  const {\n    0: formType,\n    1: setFormType\n  } = useState('login');\n  return __jsx(\"div\", {\n    className: classes.AuthFormContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, __jsx(Banner, {\n    formType: formType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }), __jsx(Form, {\n    formType: formType,\n    setFormType: setFormType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AuthForm;","map":{"version":3,"sources":["/Users/jacquelineturof/Next/office-suite-app/components/AuthForm.js"],"names":["React","useState","Button","Input","checkValidity","FontAwesomeIcon","classes","AuthProviders","formType","AuthProvidersContainer","IconContainer","FacebookBlue","join","Icon","GoogleRed","Banner","AppName","Tag","FormControl","setFormType","FormControlContainer","Form","username","setUsername","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","usernameIsValid","setUsernameIsValid","emailIsValid","setEmailIsValid","passwordIsValid","setPasswordIsValid","confirmIsValid","setConfirmIsValid","usernameIsTouched","setUsernameIsTouched","emailIsTouched","setEmailIsTouched","passwordIsTouched","setPasswordIsTouched","confirmIsTouched","setConfirmIsTouched","USERNAME_CONFIG","elementType","elementConfig","type","placeholder","iconConfig","name","package","value","changed","e","inputChangedHandler","target","touched","valid","EMAIL_CONFIG","PASSWORD_CONFIG","CONFIRM_PASSWORD_CONFIG","heading","forgotPasswordButton","controlName","emailValidityRules","required","isEmail","usernameValidityRules","minLength","maxLength","passwordValidityRules","isValidUsername","isValidEmail","isValidPassword","isConfirmValid","InputsContainer","AuthForm","AuthFormContainer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Button from './UI/Button'\nimport Input from './UI/Input'\n\nimport checkValidity from '../utility/checkValidity'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport classes from './AuthForm.module.css'\n\nconst AuthProviders = ({ formType }) => (\n    <div className = { classes.AuthProvidersContainer }>\n        <h1>{ formType === 'register' ? 'Get Started' : 'Login' }</h1>\n        <div className = { classes.AuthProviders }>\n            <div className = { [ classes.IconContainer, classes.FacebookBlue, \"Center\" ].join(' ') }>\n                <FontAwesomeIcon \n                    icon = { [ 'fab', 'facebook' ] } \n                    className = { classes.Icon } />\n            </div>\n            <div className = { [ classes.IconContainer, classes.GoogleRed, \"Center\" ].join(' ') }>\n                <FontAwesomeIcon \n                    icon = { [ 'fab', 'google' ] } \n                    className = { classes.Icon } />\n            </div>\n        </div>\n    </div>\n)\n\nconst Banner = ({ formType }) => (\n    <div className = { classes.Banner }>\n        <h1 className = { classes.AppName }><span className = \"Bold Uppercase\">super</span>cubicle</h1>\n        <p className = { classes.Tag }>Hempen halter wench hornswaggle hail-shot nipper boom yo-ho-ho topmast gangplank parley. Barkadeer belay salmagundi provost mizzen pillage Shiver me timbers black jack scuppers fire in the hole.</p>\n        <AuthProviders formType = { formType } />\n    </div>\n)\n\nconst FormControl = ({ formType, setFormType }) => (\n    <div className = { classes.FormControlContainer }>\n        <Button \n            type = { formType === 'login' ? \"Active\" : \"Simple\" }\n            clicked = { () => setFormType('login') }>\n            Login\n        </Button>\n        <Button \n            type = { formType === 'register' ? \"Active\" : \"Simple\" }\n            clicked = { () => setFormType('register') }>\n            Register\n        </Button>\n    </div>\n)\n\nconst Form = ({ formType, setFormType }) => {\n    /*\n        Form Inputs\n    */\n    const [ username, setUsername ] = useState('')\n    const [ email, setEmail ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const [ confirmPassword, setConfirmPassword ] = useState('')\n\n     /*\n        INPUT Validation State\n    */\n    const [ usernameIsValid, setUsernameIsValid ] = useState('')\n    const [ emailIsValid, setEmailIsValid ] = useState('')\n    const [ passwordIsValid, setPasswordIsValid ] = useState('')\n    const [ confirmIsValid, setConfirmIsValid ] = useState('confirm')\n\n    const [ usernameIsTouched, setUsernameIsTouched ] = useState(false)\n    const [ emailIsTouched, setEmailIsTouched ] = useState(false)\n    const [ passwordIsTouched, setPasswordIsTouched ] = useState(false)\n    const [ confirmIsTouched, setConfirmIsTouched ] = useState(false)\n\n    /*\n        Form Inputs Config\n    */\n    const USERNAME_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Username'\n        },\n        iconConfig: {\n            name: 'signature',\n            package: 'fal'\n        },\n        value: username,\n        changed: e => inputChangedHandler('username', e.target.value),\n        touched: usernameIsTouched,\n        valid: usernameIsValid\n    }\n\n    const EMAIL_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Your Email'\n        },\n        iconConfig: {\n            name: 'at',\n            package: 'fal'\n        },\n        value: email,\n        changed: e =>  e => inputChangedHandler('email', e.target.value),\n        touched: emailIsTouched,\n        valid: emailIsValid\n    }\n\n    const PASSWORD_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n        },\n        iconConfig: {\n            name: 'lock-alt',\n            package: 'fal'\n        },\n        value: password,\n        changed: e => inputChangedHandler('password', e.target.value),\n        touched: passwordIsTouched,\n        valid: passwordIsValid\n    }\n\n    const CONFIRM_PASSWORD_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Confirm Password'\n        },\n        iconConfig: {\n            name: 'check',\n            package: 'fal'\n        },\n        value: confirmPassword,\n        changed:  e => inputChangedHandler('confirm', e.target.value),\n        touched: confirmIsTouched,\n        valid: confirmIsValid\n    }\n    \n    // Form Heading\n    let heading\n\n    if (formType === 'login') heading = 'Login'\n    else if (formType === 'register') heading = 'Register'\n    else heading = 'Send Password Reset Email'\n\n    // forgot password button, set formType = 'forgotPassword'\n    const forgotPasswordButton = (\n        <Button\n            type = \"Forgot\" \n            clicked = { () => setFormType('forgotPassword') }>\n            Forgot Password?\n        </Button>\n    )\n\n    /*\n        Form Handlers\n        changed/submit\n    */\n    const inputChangedHandler = (controlName, value) => {\n        const emailValidityRules = {\n            required: true,\n            isEmail: true\n        }\n\n        const usernameValidityRules = {\n            required: true,\n            minLength: 6,\n            maxLength: 14\n        }\n\n        const passwordValidityRules = {\n            required: true,\n            minLength: 6\n        }\n\n        switch(controlName) {\n            case('username'):\n                setUsernameIsTouched(true)\n                const isValidUsername = checkValidity(value)\n                setUsernameIsValid(isValidUsername)\n                setUsername(value)\n                break\n            case('email'):\n                setEmailIsTouched(true)\n                const isValidEmail = checkValidity(value)\n                setEmailIsValid(isValidEmail)\n                setEmail(value)\n                break\n            case('password'):\n                setPasswordIsTouched(true)\n                const isValidPassword = checkValidity(value)\n                setPasswordIsValid(isValidPassword)\n                setPassword(value)\n                break\n            case('confirm'):\n                setConfirmIsTouched(true)\n                const isConfirmValid = checkValidity(value)\n                setConfirmIsValid(isConfirmValid)\n                setConfirmPassword(value)\n                break\n            default: return // ERROR\n        }\n    }\n\n    return (\n        <form className = { classes.Form }>\n            <FormControl formType = { formType } setFormType = { setFormType } />\n            <h1>{ heading }</h1>\n            <div className = { classes.InputsContainer }>\n                { \n                    formType === 'forgotPassword' \n                        ? null \n                        : <Input { ...USERNAME_CONFIG } /> \n                }\n                {\n                    formType === 'login'\n                        ? null\n                        : <Input { ...EMAIL_CONFIG } />\n                }\n                {\n                    formType === 'forgotPassword'\n                        ? null\n                        : <Input  { ...PASSWORD_CONFIG } />\n                }\n\n                {\n                    formType === 'register'\n                        ? <Input { ...CONFIRM_PASSWORD_CONFIG } />\n                        : null\n                }\n            </div>\n            <Button isSubmit = { true } type = \"Primary\">\n                Submit\n            </Button>\n            { formType === 'login' ? forgotPasswordButton : null }\n        </form>\n    )\n}\n\nconst AuthForm = () => {\n    // formTypes -> 'login', 'register', 'forgotPassword\n    const [ formType, setFormType ] = useState('login')\n    \n    return (\n        <div className = { classes.AuthFormContainer }>\n            <Banner formType = { formType } />\n            <Form formType = { formType } setFormType = { setFormType } />\n        </div>\n    )\n}\n\nexport default AuthForm"]},"metadata":{},"sourceType":"module"}