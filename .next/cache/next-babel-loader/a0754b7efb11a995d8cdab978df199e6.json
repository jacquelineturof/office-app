{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jacquelineturof/Next/office-suite-app/components/AuthForm.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Button from './UI/Button';\nimport Input from './UI/Input';\nimport checkValidity from '../utility/checkValidity';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './AuthForm.module.css';\n\nvar AuthProviders = function AuthProviders(_ref) {\n  var formType = _ref.formType;\n  return __jsx(\"div\", {\n    className: classes.AuthProvidersContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, formType === 'register' ? 'Get Started' : 'Login'), __jsx(\"div\", {\n    className: classes.AuthProviders,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: [classes.IconContainer, classes.FacebookBlue, \"Center\"].join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: ['fab', 'facebook'],\n    className: classes.Icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: [classes.IconContainer, classes.GoogleRed, \"Center\"].join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: ['fab', 'google'],\n    className: classes.Icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }))));\n};\n\n_c = AuthProviders;\n\nvar Banner = function Banner(_ref2) {\n  var formType = _ref2.formType;\n  return __jsx(\"div\", {\n    className: classes.Banner,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: classes.AppName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: \"Bold Uppercase\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 45\n    }\n  }, \"super\"), \"cubicle\"), __jsx(\"p\", {\n    className: classes.Tag,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Hempen halter wench hornswaggle hail-shot nipper boom yo-ho-ho topmast gangplank parley. Barkadeer belay salmagundi provost mizzen pillage Shiver me timbers black jack scuppers fire in the hole.\"), __jsx(AuthProviders, {\n    formType: formType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }));\n};\n\n_c2 = Banner;\n\nvar FormControl = function FormControl(_ref3) {\n  var formType = _ref3.formType,\n      setFormType = _ref3.setFormType;\n  return __jsx(\"div\", {\n    className: classes.FormControlContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    type: formType === 'login' ? \"Active\" : \"Simple\",\n    clicked: function clicked() {\n      return setFormType('login');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Login\"), __jsx(Button, {\n    type: formType === 'register' ? \"Active\" : \"Simple\",\n    clicked: function clicked() {\n      return setFormType('register');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Register\"));\n};\n\n_c3 = FormControl;\n\nvar Form = function Form(_ref4) {\n  _s();\n\n  var formType = _ref4.formType,\n      setFormType = _ref4.setFormType;\n\n  /*\n      Form Inputs\n  */\n  var _useState = useState(''),\n      username = _useState[0],\n      setUsername = _useState[1];\n\n  var _useState2 = useState(''),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      password = _useState3[0],\n      setPassword = _useState3[1];\n\n  var _useState4 = useState(''),\n      confirmPassword = _useState4[0],\n      setConfirmPassword = _useState4[1];\n  /*\n     INPUT Validation State\n  */\n\n\n  var _useState5 = useState(''),\n      usernameIsValid = _useState5[0],\n      setUsernameIsValid = _useState5[1];\n\n  var _useState6 = useState(''),\n      emailIsValid = _useState6[0],\n      setEmailIsValid = _useState6[1];\n\n  var _useState7 = useState(''),\n      passwordIsValid = _useState7[0],\n      setPasswordIsValid = _useState7[1];\n\n  var _useState8 = useState('confirm'),\n      confirmIsValid = _useState8[0],\n      setConfirmIsValid = _useState8[1];\n\n  var _useState9 = useState(false),\n      usernameIsTouched = _useState9[0],\n      setUsernameIsTouched = _useState9[1];\n\n  var _useState10 = useState(false),\n      emailIsTouched = _useState10[0],\n      setEmailIsTouched = _useState10[1];\n\n  var _useState11 = useState(false),\n      passwordIsTouched = _useState11[0],\n      setPasswordIsTouched = _useState11[1];\n\n  var _useState12 = useState(false),\n      confirmIsTouched = _useState12[0],\n      setConfirmIsTouched = _useState12[1];\n  /*\n      Form Inputs Config\n  */\n\n\n  var USERNAME_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'text',\n      placeholder: 'Username'\n    },\n    iconConfig: {\n      name: 'signature',\n      \"package\": 'fal'\n    },\n    value: username,\n    changed: function changed(e) {\n      return inputChangedHandler('username', e.target.value);\n    },\n    touched: usernameIsTouched,\n    valid: usernameIsValid\n  };\n  var EMAIL_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'text',\n      placeholder: 'Your Email'\n    },\n    iconConfig: {\n      name: 'at',\n      \"package\": 'fal'\n    },\n    value: email,\n    changed: function changed(e) {\n      return function (e) {\n        return inputChangedHandler('email', e.target.value);\n      };\n    },\n    touched: emailIsTouched,\n    valid: emailIsValid\n  };\n  var PASSWORD_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'password',\n      placeholder: 'Password'\n    },\n    iconConfig: {\n      name: 'lock-alt',\n      \"package\": 'fal'\n    },\n    value: password,\n    changed: function changed(e) {\n      return inputChangedHandler('password', e.target.value);\n    },\n    touched: passwordIsTouched,\n    valid: passwordIsValid\n  };\n  var CONFIRM_PASSWORD_CONFIG = {\n    elementType: 'input',\n    elementConfig: {\n      type: 'password',\n      placeholder: 'Confirm Password'\n    },\n    iconConfig: {\n      name: 'check',\n      \"package\": 'fal'\n    },\n    value: confirmPassword,\n    changed: function changed(e) {\n      return inputChangedHandler('confirm', e.target.value);\n    },\n    touched: confirmIsTouched,\n    valid: confirmIsValid\n  }; // Form Heading\n\n  var heading;\n  if (formType === 'login') heading = 'Login';else if (formType === 'register') heading = 'Register';else heading = 'Send Password Reset Email'; // forgot password button, set formType = 'forgotPassword'\n\n  var forgotPasswordButton = __jsx(Button, {\n    type: \"Forgot\",\n    clicked: function clicked() {\n      return setFormType('forgotPassword');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Forgot Password?\");\n  /*\n      Form Handlers\n      changed/submit\n  */\n\n\n  var inputChangedHandler = function inputChangedHandler(controlName, value) {\n    var emailValidityRules = {\n      required: true,\n      isEmail: true\n    };\n    var usernameValidityRules = {\n      required: true,\n      minLength: 6,\n      maxLength: 14\n    };\n    var passwordValidityRules = {\n      required: true,\n      minLength: 6\n    };\n\n    switch (controlName) {\n      case 'username':\n        setUsernameIsTouched(true);\n        var isValidUsername = checkValidity(value);\n        setUsernameIsValid(isValidUsername);\n        setUsername(value);\n        break;\n\n      case 'email':\n        setEmailIsTouched(true);\n        var isValidEmail = checkValidity(value);\n        setEmailIsValid(isValidEmail);\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPasswordIsTouched(true);\n        var isValidPassword = checkValidity(value);\n        setPasswordIsValid(isValidPassword);\n        setPassword(value);\n        break;\n\n      case 'confirm':\n        setConfirmIsTouched(true);\n        var isConfirmValid = checkValidity(value);\n        setConfirmIsValid(isConfirmValid);\n        setConfirmPassword(value);\n        break;\n\n      default:\n        return;\n      // ERROR\n    }\n  };\n\n  return __jsx(\"form\", {\n    className: classes.Form,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    formType: formType,\n    setFormType: setFormType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, heading), __jsx(\"div\", {\n    className: classes.InputsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, formType === 'forgotPassword' ? null : __jsx(Input, _extends({}, USERNAME_CONFIG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 27\n    }\n  })), formType === 'login' ? null : __jsx(Input, _extends({}, EMAIL_CONFIG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 27\n    }\n  })), formType === 'forgotPassword' ? null : __jsx(Input, _extends({}, PASSWORD_CONFIG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }\n  })), formType === 'register' ? __jsx(Input, _extends({}, CONFIRM_PASSWORD_CONFIG, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 27\n    }\n  })) : null), __jsx(Button, {\n    isSubmit: true,\n    type: \"Primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }\n  }, \"Submit\"), formType === 'login' ? forgotPasswordButton : null);\n};\n\n_s(Form, \"7KF+5TSRiKnEm5B/XJJ5R28IrIY=\");\n\n_c4 = Form;\n\nvar AuthForm = function AuthForm() {\n  _s2();\n\n  // formTypes -> 'login', 'register', 'forgotPassword\n  var _useState13 = useState('login'),\n      formType = _useState13[0],\n      setFormType = _useState13[1];\n\n  return __jsx(\"div\", {\n    className: classes.AuthFormContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, __jsx(Banner, {\n    formType: formType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }), __jsx(Form, {\n    formType: formType,\n    setFormType: setFormType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s2(AuthForm, \"LG0GMAh/5X7dEoHpvsi8TCEo1oU=\");\n\n_c5 = AuthForm;\nexport default AuthForm;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AuthProviders\");\n$RefreshReg$(_c2, \"Banner\");\n$RefreshReg$(_c3, \"FormControl\");\n$RefreshReg$(_c4, \"Form\");\n$RefreshReg$(_c5, \"AuthForm\");","map":{"version":3,"sources":["/Users/jacquelineturof/Next/office-suite-app/components/AuthForm.js"],"names":["React","useState","Button","Input","checkValidity","FontAwesomeIcon","classes","AuthProviders","formType","AuthProvidersContainer","IconContainer","FacebookBlue","join","Icon","GoogleRed","Banner","AppName","Tag","FormControl","setFormType","FormControlContainer","Form","username","setUsername","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","usernameIsValid","setUsernameIsValid","emailIsValid","setEmailIsValid","passwordIsValid","setPasswordIsValid","confirmIsValid","setConfirmIsValid","usernameIsTouched","setUsernameIsTouched","emailIsTouched","setEmailIsTouched","passwordIsTouched","setPasswordIsTouched","confirmIsTouched","setConfirmIsTouched","USERNAME_CONFIG","elementType","elementConfig","type","placeholder","iconConfig","name","value","changed","e","inputChangedHandler","target","touched","valid","EMAIL_CONFIG","PASSWORD_CONFIG","CONFIRM_PASSWORD_CONFIG","heading","forgotPasswordButton","controlName","emailValidityRules","required","isEmail","usernameValidityRules","minLength","maxLength","passwordValidityRules","isValidUsername","isValidEmail","isValidPassword","isConfirmValid","InputsContainer","AuthForm","AuthFormContainer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Button from './UI/Button'\nimport Input from './UI/Input'\n\nimport checkValidity from '../utility/checkValidity'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport classes from './AuthForm.module.css'\n\nconst AuthProviders = ({ formType }) => (\n    <div className = { classes.AuthProvidersContainer }>\n        <h1>{ formType === 'register' ? 'Get Started' : 'Login' }</h1>\n        <div className = { classes.AuthProviders }>\n            <div className = { [ classes.IconContainer, classes.FacebookBlue, \"Center\" ].join(' ') }>\n                <FontAwesomeIcon \n                    icon = { [ 'fab', 'facebook' ] } \n                    className = { classes.Icon } />\n            </div>\n            <div className = { [ classes.IconContainer, classes.GoogleRed, \"Center\" ].join(' ') }>\n                <FontAwesomeIcon \n                    icon = { [ 'fab', 'google' ] } \n                    className = { classes.Icon } />\n            </div>\n        </div>\n    </div>\n)\n\nconst Banner = ({ formType }) => (\n    <div className = { classes.Banner }>\n        <h1 className = { classes.AppName }><span className = \"Bold Uppercase\">super</span>cubicle</h1>\n        <p className = { classes.Tag }>Hempen halter wench hornswaggle hail-shot nipper boom yo-ho-ho topmast gangplank parley. Barkadeer belay salmagundi provost mizzen pillage Shiver me timbers black jack scuppers fire in the hole.</p>\n        <AuthProviders formType = { formType } />\n    </div>\n)\n\nconst FormControl = ({ formType, setFormType }) => (\n    <div className = { classes.FormControlContainer }>\n        <Button \n            type = { formType === 'login' ? \"Active\" : \"Simple\" }\n            clicked = { () => setFormType('login') }>\n            Login\n        </Button>\n        <Button \n            type = { formType === 'register' ? \"Active\" : \"Simple\" }\n            clicked = { () => setFormType('register') }>\n            Register\n        </Button>\n    </div>\n)\n\nconst Form = ({ formType, setFormType }) => {\n    /*\n        Form Inputs\n    */\n    const [ username, setUsername ] = useState('')\n    const [ email, setEmail ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const [ confirmPassword, setConfirmPassword ] = useState('')\n\n     /*\n        INPUT Validation State\n    */\n    const [ usernameIsValid, setUsernameIsValid ] = useState('')\n    const [ emailIsValid, setEmailIsValid ] = useState('')\n    const [ passwordIsValid, setPasswordIsValid ] = useState('')\n    const [ confirmIsValid, setConfirmIsValid ] = useState('confirm')\n\n    const [ usernameIsTouched, setUsernameIsTouched ] = useState(false)\n    const [ emailIsTouched, setEmailIsTouched ] = useState(false)\n    const [ passwordIsTouched, setPasswordIsTouched ] = useState(false)\n    const [ confirmIsTouched, setConfirmIsTouched ] = useState(false)\n\n    /*\n        Form Inputs Config\n    */\n    const USERNAME_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Username'\n        },\n        iconConfig: {\n            name: 'signature',\n            package: 'fal'\n        },\n        value: username,\n        changed: e => inputChangedHandler('username', e.target.value),\n        touched: usernameIsTouched,\n        valid: usernameIsValid\n    }\n\n    const EMAIL_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Your Email'\n        },\n        iconConfig: {\n            name: 'at',\n            package: 'fal'\n        },\n        value: email,\n        changed: e =>  e => inputChangedHandler('email', e.target.value),\n        touched: emailIsTouched,\n        valid: emailIsValid\n    }\n\n    const PASSWORD_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n        },\n        iconConfig: {\n            name: 'lock-alt',\n            package: 'fal'\n        },\n        value: password,\n        changed: e => inputChangedHandler('password', e.target.value),\n        touched: passwordIsTouched,\n        valid: passwordIsValid\n    }\n\n    const CONFIRM_PASSWORD_CONFIG = {\n        elementType: 'input',\n        elementConfig: {\n            type: 'password',\n            placeholder: 'Confirm Password'\n        },\n        iconConfig: {\n            name: 'check',\n            package: 'fal'\n        },\n        value: confirmPassword,\n        changed:  e => inputChangedHandler('confirm', e.target.value),\n        touched: confirmIsTouched,\n        valid: confirmIsValid\n    }\n    \n    // Form Heading\n    let heading\n\n    if (formType === 'login') heading = 'Login'\n    else if (formType === 'register') heading = 'Register'\n    else heading = 'Send Password Reset Email'\n\n    // forgot password button, set formType = 'forgotPassword'\n    const forgotPasswordButton = (\n        <Button\n            type = \"Forgot\" \n            clicked = { () => setFormType('forgotPassword') }>\n            Forgot Password?\n        </Button>\n    )\n\n    /*\n        Form Handlers\n        changed/submit\n    */\n    const inputChangedHandler = (controlName, value) => {\n        const emailValidityRules = {\n            required: true,\n            isEmail: true\n        }\n\n        const usernameValidityRules = {\n            required: true,\n            minLength: 6,\n            maxLength: 14\n        }\n\n        const passwordValidityRules = {\n            required: true,\n            minLength: 6\n        }\n\n        switch(controlName) {\n            case('username'):\n                setUsernameIsTouched(true)\n                const isValidUsername = checkValidity(value)\n                setUsernameIsValid(isValidUsername)\n                setUsername(value)\n                break\n            case('email'):\n                setEmailIsTouched(true)\n                const isValidEmail = checkValidity(value)\n                setEmailIsValid(isValidEmail)\n                setEmail(value)\n                break\n            case('password'):\n                setPasswordIsTouched(true)\n                const isValidPassword = checkValidity(value)\n                setPasswordIsValid(isValidPassword)\n                setPassword(value)\n                break\n            case('confirm'):\n                setConfirmIsTouched(true)\n                const isConfirmValid = checkValidity(value)\n                setConfirmIsValid(isConfirmValid)\n                setConfirmPassword(value)\n                break\n            default: return // ERROR\n        }\n    }\n\n    return (\n        <form className = { classes.Form }>\n            <FormControl formType = { formType } setFormType = { setFormType } />\n            <h1>{ heading }</h1>\n            <div className = { classes.InputsContainer }>\n                { \n                    formType === 'forgotPassword' \n                        ? null \n                        : <Input { ...USERNAME_CONFIG } /> \n                }\n                {\n                    formType === 'login'\n                        ? null\n                        : <Input { ...EMAIL_CONFIG } />\n                }\n                {\n                    formType === 'forgotPassword'\n                        ? null\n                        : <Input  { ...PASSWORD_CONFIG } />\n                }\n\n                {\n                    formType === 'register'\n                        ? <Input { ...CONFIRM_PASSWORD_CONFIG } />\n                        : null\n                }\n            </div>\n            <Button isSubmit = { true } type = \"Primary\">\n                Submit\n            </Button>\n            { formType === 'login' ? forgotPasswordButton : null }\n        </form>\n    )\n}\n\nconst AuthForm = () => {\n    // formTypes -> 'login', 'register', 'forgotPassword\n    const [ formType, setFormType ] = useState('login')\n    \n    return (\n        <div className = { classes.AuthFormContainer }>\n            <Banner formType = { formType } />\n            <Form formType = { formType } setFormType = { setFormType } />\n        </div>\n    )\n}\n\nexport default AuthForm"]},"metadata":{},"sourceType":"module"}